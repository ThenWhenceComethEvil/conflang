#!/bin/bash
#===============================================================================
# @section                           Main
#-------------------------------------------------------------------------------
set -eo pipefail

if [[ $CONFC_TRACEBACK ]] ; then
   trap '(( $? )) && traceback 2' EXIT
fi

# When querying an env var, must ensure it hasn't been stomped by a variable
# declared within this script itself. Returning value of SNAPSHOT[$var].
declare -gA SNAPSHOT=()
while IFS= read -r -d '' line ; do
   key="${line%%=*}"
   val="${line#*=}"
   SNAPSHOT["$key"]="$val"
done < <(env --null)


function usage {
cat <<EOF
usage: $(basename "${BASH_SOURCE[0]}") [option] FILE

options
   -h | --help    show this message and exit
   -o | --out     file for compiled output

Unless --out is specified, compilation result is dumped to stdout.

EOF

exit "$1"
}


function globals:init {
   # Compiled output tree file location.
   declare -g OUTPUT=/dev/stdout

   # The root of the compiled output.
   declare -g _SKELLY_ROOT=

   # Array of "file objects", containing tuple of {AST, Symtab} pointers.
   declare -gA FILES=()
   #
   # @type
   declare -g  FILE
   declare -gi _FILE_NUM=0
   declare -gi _FILE_LINES_NUM=0

   # Array of absolute file paths to parse. Preserves order of imports, as
   # FILES is an associative array.
   declare -ga IMPORTS=()

   # Poor man's `type()` function.
   declare -gA TYPEOF=()

   # @type
   declare -g  TOKEN
   declare -gi _TOKEN_NUM=0

   # @type
   declare -g  NODE
   declare -gi _NODE_NUM=0

   # @type
   declare -g  LOCATION=
   declare -gi _LOC_NUM=0

   # @type
   declare -g  TYPE=
   declare -gi _TYPE_NUM=0

   # @type
   declare -g  SYMBOL=
   declare -gi _SYMBOL_NUM=0

   # @type
   declare -g  SYMTAB=
   declare -gi _SYMTAB_NUM=0

   # @type
   declare -g  ERROR=''
   declare -gi _ERROR_NUM=0

   # Maps a symtab node to its parent.
   declare -gA SYMTAB_PARENT=()

   # Drops anchor at the start of a declaration, expression, etc. For error
   # reporting.
   # @type
   declare -g  ANCHOR=''
}


function argparse {
   local -a positional=()

   while [[ $# -gt 0 ]] ; do
      case "$1" in
         -h | --help)
               usage 0
               ;;

         -o | --out)
               shift
               OUTPUT="$1"
               shift
               ;;

         *)    positional+=( "$1" )
               shift
               ;;
      esac
   done

   if [[ ! $positional ]] ; then
      raise no_input
   elif [[ ${#positional[@]} -gt 1 ]] ; then
      raise argument_error "${positional[@]}"
   fi

   if [[ "${positional[0]}" == '-' ]] ; then
      declare -g INPUT=/dev/stdin
   else
      declare -g INPUT="${positional[0]}"
   fi
}


# main()
# @description
#  In pseudocode:
#  ```
#  let imports = []
#  let files   = []
#
#  argparse()
#  push(imports, argv[0])
#  
#  for file in imports[] do
#     ast, symtab = parse(file)
#     push(imports, ast.imports[])
#     push(files, {ast,symtab})
#  done
#  ```
#
# @see   globals:init
# @see   file:new
# @see   file:resolve
# @see   file:parse
# @see   fold
#
# @env   FILES
# @env   INPUT
# @set   FILE
# @set   IMPORTS[]
function main {
   argparse "$@"
   globals:init

   symtab:init_globals
   local globals="$SYMTAB"

   file:new ; file:resolve "$INPUT"  "$PWD"
   #--^ Adds initial file to IMPORTS[]

   for (( idx = 0 ; idx < ${#IMPORTS[@]} ; ++idx )) ; do
      # Every file's parent symtab should be the globals.
      declare -g SYMTAB="$globals"

      local path="${IMPORTS[$idx]}"
      local file="${FILES[$path]}"
      file:parse "$file"

      local -n ast_r="$NODE"
      local -n header_r="${ast_r[header]}"
      local -n items_r="${header_r[items]}"

      for node in "${items_r[@]}" ; do
         if [[ ! "${TYPEOF[$node]}" == import ]] ; then
            continue
         fi

         local -n node_r="$node"
         local -n import_path_r="${node_r[path]}"
         local import_path="${import_path_r[value]}"

         # Location node of the import statement, for error reporting.
         local loc="${node_r[location]}"

         # The file the import is relative *to*, i.e. the dirname of the
         # calling file.
         local -n loc_r="$loc"
         local parent="${loc_r[file]%/*}"

         file:new
         file:resolve  "$import_path"  "$parent"  "$loc"
      done
   done

   # Reduces all the IMPORTS[] to a single {Symtab,AST}.
   fold ; local ast="$NODE"

   walk:flatten "$ast"
   dependency_to_map
   dependency_sort

   for node in "${ORDERED_DEPS[@]}" ; do
      walk:semantics "$ast"
   done

   # TODO: swap this to $ast after folding works.
   walk:compiler "$container"

   declare -f conf > "$OUTPUT"
   [[ ${!_SKELLY_*} ]] && declare -p ${!_SKELLY_*} > "$OUTPUT"  ||:
   [[ ${!_DATA_*}   ]] && declare -p ${!_DATA_*}   > "$OUTPUT"  ||:
}


#>>TOPIC SOURCE
# Equiv. to Python's >if __name__ == '__main__'
if [[ ! "${BASH_SOURCE[0]}" == "$0" ]] ; then
   return 0
fi

# shellcheck disable=SC2155,SC2164
declare -g PROGDIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" ; pwd )

# shellcheck source=./src/errors.sh
source "${PROGDIR}"/errors.sh

# shellcheck source=./src/files.sh
source "${PROGDIR}"/files.sh

# shellcheck source=./src/lexer.sh
source "${PROGDIR}"/lexer.sh

# shellcheck source=./src/parser.sh
source "${PROGDIR}"/parser.sh

# shellcheck source=./src/symbols.sh
source "${PROGDIR}"/symbols.sh

# shellcheck source=./src/fold.sh
source "${PROGDIR}"/fold.sh

# shellcheck source=./src/semantics.sh
source "${PROGDIR}"/semantics.sh

# shellcheck source=./src/compiler.sh
source "${PROGDIR}"/compiler.sh

# shellcheck source=./src/api.sh
source "${PROGDIR}"/api.sh
#<<END TOPIC SOURCE

main "$@"
