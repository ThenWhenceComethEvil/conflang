# vim: ft=conf

2022-11-25
   1. [x] Throw away `constrain` stuff
   2. [ ] Refactor all `add_file` and related functions
   3. [x] Include statement in the HEADER section
   4. [ ] New parsing structure, make independent tuples of {AST,Symtab}
         - Much more testable
         - Easier to merge
   5. [ ] New `merge` that respects new import rules
   6. [ ] Includes use `as`, enter the identifier into the symtab
   7. [ ] Records, arrays as single-type-only, typedefs

   Part of this refactoring is going to be cleaning up the lib/utils.sh. All of
   the `file`-based functions are kinda janky. Need to clean up just all that
   nonsense.


2022-11-27
   Wondering about `import ... as ...;`. There is no way to then put the
   imported section into the file. Sections are not expressions. Merely a
   collection of declarations.

   Can either:
      1. Allow `as <name>` to bind to a symbol, or not to concatenate into the
         file, or
      2. Only use the `as <name>` form, and require use of a keyword to place
         it in the file

   I worry about binding to a name, as it's easy for a downstream file to
   inadvertanly stomp on the name.

   Hmm. Should be caught by typechecking though. Pulling in the values of a
   section with a `from <name>;` statement or something only may take a section.

   I think for now we ignore this. Concatenation only. Can look at it again down
   the line.

   What may be overwritten in a symbol when included?
      - Expressions
      - Types may be declared with equal or greater specificity


   After the parsing & symbol table phases, I don't think we actually need to
   parse the entirety of the AST. Can just do sections, starting with the
   %container. The header information is unnecessary after imports, and typedefs
   (which are handled in the symtab phase).
