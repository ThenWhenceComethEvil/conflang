symbol table creation
   - [x] create expected types
   - [x] create ANY type if not specified
   - [ ] create expected types w/ subtypes

merge trees
   allows.
      - [ ] declare type that exactly matches parent
      - [ ] set value if not exists
      - [ ] overwrite parent expression if provided by child
      - [ ] overflow keys from child to parent
      - [ ] missing key that isn't required
      - [ ] missing section that isn't required
   disallows.
      - [ ] redefine type
      - [ ] declare section as variable
      - [ ] declare variable as section
      - [ ] undeclared required
         - [ ] key
         - [ ] required section due to required key
         - [ ] nested required sections

semantic analysis
   allows.
      - [ ] basic types match (int, str, path, etc.)
      - [ ] complex types match (array of strings, array of arrays of strings)
      - [ ] typecasts supercede expression type
            > number (int): f"-{$SHLVL}" -> int;
            > number (int): -($SHLVL -> int);
      - [ ] internal variable types match
   disallows.
      - [ ] unary negation for any expression but integers
